openapi: 3.0.0
info:
  title: User API (v2)
  description: |
    사용자 정보 관리 API (v2)
    
    #### Revision History
    
    | Date | Description |
    |--------|--------------------------------|
    | 2025.03.18 | 최초 등록 |
  version: 0.1.0
servers:
  - url: https://api.ourfit.life
paths:
  /v2/users/mates:
    get:
      summary: 메이트 탐색 API
      description: |
        메이트 매칭을 위한 필터링이 적용된 사용자 목록을 조회합니다.
        
        가입 오래된 순으로 정렬됩니다.
        
        ** 항상 검색에 포함되는 조건 **
        - 나와 같은 동네(지역2, 시/군/구)에 사는 사용자
        - 현재 메이트가 없는 사용자
      security:
        - bearerAuth: [ ]
      parameters:
        - name: nickname
          in: query
          required: false
          schema:
            type: string
            example: "운초"
          description: "닉네임"
        - name: gender
          in: query
          required: false
          schema:
            type: string
            enum: [ 'F', 'M' ]
          description: "성별"
        - name: preferredTimes
          in: query
          required: false
          schema:
            type: array
            items:
              enum: [ "WEEKDAY_MORNING", "WEEKDAY_AFTERNOON", "WEEKDAY_EVENING", "WEEKEND_MORNING", "WEEKEND_AFTERNOON", "WEEKEND_EVENING" ]
            description: "선호하는 시간대"
        - name: workoutTypes
          in: query
          required: false
          schema:
            type: array
            items:
              enum: [ "GYM", "PILATES", "SWIMMING", "DANCE", "SQUASH", "BOXING", "GOLF", "TENNIS", "YOGA", "CROSSFIT" ]
            description: "운동 종목 (GET v1/workout-types 로 확인 가능)"
        - name: lastId
          in: query
          description: "이전 요청에서 마지막 항목의 ID (첫 요청인 경우 생략 또는 null)"
          required: false
          schema:
            type: number
            example: 1
        - name: size
          in: query
          description: "페이지 크기 / 기본값: 20"
          required: false
          schema:
            type: number
            example: 10
      responses:
        200:
          $ref: "#/components/responses/SlicedUserInfoResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    SlicedUserInfoResponse:
      description: "사용자 목록 조회 응답"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "schemas.yaml#/components/schemas/SliceResponse"
              - type: object
                properties:
                  data:
                    type: object
                    properties:
                      content:
                        type: array
                        items:
                          $ref: "#/components/schemas/BasicUserInfoResponse"
  schemas:
    BasicUserInfoResponse:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: "사용자 ID"
          nullable: false
        profileUrl:
          type: string
          format: uri
          example: "https://example.com/profile.jpg"
          description: "프로필 이미지 URL"
          nullable: true
        nickname:
          type: string
          example: "닉네임입니다"
          description: "닉네임"
          nullable: false
        gender:
          type: string
          enum: [ 'F', 'M' ]
          description: "성별"
          nullable: false
        age:
          type: number
          example: 20
          description: "나이"
          nullable: false
        skillLevel:
          type: string
          enum: [ 'BEGINNER', 'INTERMEDIATE', 'ADVANCED' ]
          description: "운동 실력"
          nullable: false
        introduction:
          type: string
          example: "안녕하세요. 자기소개입니다."
          description: "소개"
          nullable: true
        preferredWorkoutTime:
          type: string
          enum: [ "WEEKDAY_MORNING", "WEEKDAY_AFTERNOON", "WEEKDAY_EVENING", "WEEKEND_MORNING", "WEEKEND_AFTERNOON", "WEEKEND_EVENING" ]
          description: "선호하는 시간대"
          nullable: false
        favoriteWorkouts:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                enum: [ "GYM", "PILATES", "SWIMMING", "DANCE", "SQUASH", "BOXING", "GOLF", "TENNIS", "YOGA", "CROSSFIT" ]
                description: "운동 종목 코드"
                nullable: false
              name:
                type: string
                enum: [ "헬스", "필라테스", "수영", "댄스", "스쿼시", "복싱", "골프", "테니스", "요가", "크로스핏" ]
                description: "운동 종목 이름"
                nullable: false
            description: "운동 종목 정보"
            nullable: false
          description: "선호하는 운동 종목"
          nullable: false